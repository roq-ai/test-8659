generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

/// This model has been renamed to 'Renamedcase' during introspection, because the original name 'case' is reserved.
model Renamedcase {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  case_name     String    @db.VarChar(255)
  case_type     String?   @db.VarChar(255)
  date_reported DateTime? @db.Timestamp(6)
  status        String?   @db.VarChar(255)
  description   String?   @db.VarChar(255)
  user_id       String    @db.Uuid
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @default(now()) @db.Timestamp(6)
  user          user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("case")
}

model compliance {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  compliance_name  String       @db.VarChar(255)
  compliance_type  String?      @db.VarChar(255)
  date_implemented DateTime?    @db.Timestamp(6)
  status           String?      @db.VarChar(255)
  description      String?      @db.VarChar(255)
  organization_id  String       @db.Uuid
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  updated_at       DateTime     @default(now()) @db.Timestamp(6)
  organization     organization @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model fraud {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fraud_name    String    @db.VarChar(255)
  fraud_type    String?   @db.VarChar(255)
  date_detected DateTime? @db.Timestamp(6)
  status        String?   @db.VarChar(255)
  description   String?   @db.VarChar(255)
  user_id       String    @db.Uuid
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @default(now()) @db.Timestamp(6)
  user          user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description      String?      @db.VarChar(255)
  location         String?      @db.VarChar(255)
  established_date DateTime?    @db.Timestamp(6)
  industry_type    String?      @db.VarChar(255)
  name             String       @db.VarChar(255)
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  updated_at       DateTime     @default(now()) @db.Timestamp(6)
  user_id          String       @db.Uuid
  tenant_id        String       @db.VarChar(255)
  compliance       compliance[]
  user             user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  policy           policy[]
}

model policy {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  policy_name     String       @db.VarChar(255)
  policy_type     String?      @db.VarChar(255)
  effective_date  DateTime?    @db.Timestamp(6)
  expiry_date     DateTime?    @db.Timestamp(6)
  description     String?      @db.VarChar(255)
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  Renamedcase  Renamedcase[]
  fraud        fraud[]
  organization organization[]
}
